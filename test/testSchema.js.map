{"version":3,"file":"testSchema.js","sourceRoot":"./src/","sources":["testSchema.ts"],"names":[],"mappings":"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","sourcesContent":["import Ajv from 'ajv';\nimport { readFileSync } from 'node:fs';\nimport { join } from 'node:path';\n\nconst ajv = new Ajv({ allErrors: true, strict: false });\nconst basePath = join(__dirname, '..', 'schemas');\n\nconst schema = readFileSync(join(basePath, 'jsonConfig.json'), { encoding: 'utf-8' });\n\nconst validate = ajv.compile(JSON.parse(schema));\n\n/**\n * Tests which need to be passed\n */\nfunction positiveTests(): void {\n    for (const fileName of ['testJsonConfig.json', 'testJSONConfigPanel.json']) {\n        const content = readFileSync(join(basePath, fileName), { encoding: 'utf-8' });\n        const config = JSON.parse(content);\n        const valid = validate(config);\n\n        if (!valid) {\n            const errors = validate.errors!.map(entry => JSON.stringify(entry, null, 2));\n            console.error(errors.join('\\n'));\n            console.error(`${errors.length} errors occurred on ${fileName}`);\n            process.exit(1);\n        }\n    }\n}\n\n/** Expected errors per test */\nconst expectedErrorsPerTest = {\n    'testFailJsonConfig.json': [\n        {\n            instancePath: '/items/demoTab/items/myTable/items/2',\n            schemaPath: '#/items/allOf/18/then/additionalProperties',\n            keyword: 'additionalProperties',\n            params: {\n                additionalProperty: 'test',\n            },\n            message: 'must NOT have additional properties',\n        },\n        {\n            instancePath: '/items/demoTab/items/myTable/items/2',\n            schemaPath: '#/items/allOf/18/if',\n            keyword: 'if',\n            params: {\n                failingKeyword: 'then',\n            },\n            message: 'must match \"then\" schema',\n        },\n        {\n            instancePath: '/items/demoTab/items/myTable',\n            schemaPath: '#/patternProperties/%5E.%2B/allOf/27/if',\n            keyword: 'if',\n            params: {\n                failingKeyword: 'then',\n            },\n            message: 'must match \"then\" schema',\n        },\n        {\n            instancePath: '/items/demoTab',\n            schemaPath: '#/properties/items/patternProperties/%5E.%2B/allOf/9/if',\n            keyword: 'if',\n            params: {\n                failingKeyword: 'then',\n            },\n            message: 'must match \"then\" schema',\n        },\n        {\n            instancePath: '',\n            schemaPath: '#/if',\n            keyword: 'if',\n            params: {\n                failingKeyword: 'then',\n            },\n            message: 'must match \"then\" schema',\n        },\n    ],\n    'testFailJsonConfigPanel.json': [\n        {\n            instancePath: '',\n            schemaPath: '#/else/additionalProperties',\n            keyword: 'additionalProperties',\n            params: {\n                additionalProperty: 'iconPosition',\n            },\n            message: 'must NOT have additional properties',\n        },\n        {\n            instancePath: '',\n            schemaPath: '#/if',\n            keyword: 'if',\n            params: {\n                failingKeyword: 'else',\n            },\n            message: 'must match \"else\" schema',\n        },\n    ],\n} as const;\n\n/**\n * Tests which should be failed\n */\nfunction failingTests(): void {\n    for (const fileName of ['testFailJsonConfig.json', 'testFailJsonConfigPanel.json'] as const) {\n        const content = readFileSync(join(basePath, fileName), { encoding: 'utf-8' });\n        const config = JSON.parse(content);\n        const valid = validate(config);\n\n        if (valid) {\n            console.error(`Schema validation was successful at ${fileName}, but a fail was expected`);\n            process.exit(1);\n        }\n\n        const expectedErrors = expectedErrorsPerTest[fileName];\n\n        if (JSON.stringify(expectedErrors) !== JSON.stringify(validate.errors)) {\n            console.error(`Got different errors than expected on file ${fileName}`);\n            console.error(`Expected ${JSON.stringify(expectedErrors, null, 2)}`);\n            console.error(`Got ${JSON.stringify(validate.errors, null, 2)}`);\n            process.exit(1);\n        }\n    }\n\n    console.log('Tests successful!');\n}\n\npositiveTests();\nfailingTests();\n"]}